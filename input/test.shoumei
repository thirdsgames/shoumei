data Bool = True | False
data Unit = Unit

def and : Bool -> Bool -> Bool
    and True True = True
    and _ True = True
    and True False = False
    and _ False = False
    and _ True = False

def big : Bool -> Bool -> Bool -> Bool -> Bool
    big True True True True = False
    big _ _ _ _ = False

data TruthTable = TruthTable Bool Bool Bool Bool

data Maybe a = Just a | Nothing

data Chain a = Chain (Maybe (Maybe a)) | Empty

def and2 : Maybe Unit -> Bool -> Maybe Unit
    and2 (Just Unit) True = Just Unit
    and2 _ _ = Nothing

def unchain : Chain (Maybe (Maybe Bool)) -> Maybe Bool
    unchain (Chain (Just (Just a))) = Just a
    unchain _ = Nothing

def untable : TruthTable -> Bool
    untable (TruthTable a b c d) = a

def map : forall a b . (a -> b) -> Maybe a -> Maybe b
    map f (Just x) = Just (f x)
    map f Nothing = Nothing

def id : forall a . a -> a
    id x = x

def id2 : forall a . a -> a
    id2 = lambda x -> x

def lambda_test : Bool -> Bool
    lambda_test a = (lambda b -> and a b) a

def and3 : Bool -> Bool -> Bool
    and3 a b = let x = and a b in and x x
